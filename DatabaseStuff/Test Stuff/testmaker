CREATE TABLE "NATHAN1"."TESTTAKER" 
   (	"QUESTION" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"CHOICE1" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"CHOICE2" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"CHOICE3" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"CHOICE4" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"CHOICE5" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"ANSWER" VARCHAR2(200 BYTE) NOT NULL ENABLE
   );

INSERT INTO testtaker VALUES('Which of the following is not a trait of Java?',
'[1] It is not highly portable.',
'[2] It is an Object Oriented Programming Language.',
'[3] It takes memory management out of the hands of the developer.',
'[4] It uses instances of Classes to fulfill a  certain task',
'[5] None of these',
'1'
);

INSERT INTO testtaker VALUES('Which of these is in charge of running compiled Java code?',
'[1] JRJ',
'[2] JVN',
'[3] JQL',
'[4] JRE',
'[5] JVM',
'5'
);

INSERT INTO testtaker VALUES('What is the first line of a Java application?',
'[1] Package declaration',
'[2] Import statemnts',
'[3] Class declaration',
'[4] Object declaration',
'[5] None of these',
'1'
);

INSERT INTO testtaker VALUES('What is the purpose of the pom.xml?',
'[1] It has pom-poms',
'[2] It is used to configure a package.',
'[3] It cheers you on.',
'[4] It is used to configure maven',
'[5] None of these',
'4'
);

INSERT INTO testtaker VALUES('Which of the following is a method of Junit?',
'[1] assertIsEqual',
'[2] assertIsBool',
'[3] assertThread',
'[4] assertTrue',
'[5] assertIsFalse',
'4'
);

INSERT INTO testtaker VALUES('What does the annotation @before used for?',
'[1] To initialize global test environment',
'[2] To test',
'[3] To clean up after a local test environment',
'[4] To clean up after the local test environment',
'[5] None of these',
'5'
);

INSERT INTO testtaker VALUES('Which of the following is not a thread method?',
'[1] isDaemon',
'[2] notify',
'[3] join',
'[4] isAlive',
'[5] isDead',
'5'
);

INSERT INTO testtaker VALUES('What does the .equals() method do?',
'[1] It compares the location of two strings.',
'[2] It compares the two strings to see if they are the same.',
'[3] It compares the hashcode of two strings.',
'[4] It compares the String location to a string literal.',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('Which of these is not a sublanguage of SQL?',
'[1] Data Definition Language',
'[2] Data Query Language',
'[3] Data Database Language',
'[4] Data Manipulation Language',
'[5] Data Control Language',
'3'
);

INSERT INTO testtaker VALUES('Which command is the main focus of DQL?',
'[1] INSERT',
'[2] CREATE',
'[3] DELETE',
'[4] TRUNCATE',
'[5] None of these',
'5'
);

INSERT INTO testtaker VALUES('What is the purpose of the object class?',
'[1] It provides the class Class',
'[2] It provides a framework in which all classes are derived from.',
'[3] It provides the developer with a method to simulate AI',
'[4] It provides users the ability to take in an input',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('From where does the Collection Interface inherit from?',
'[1] Collection is not an interface',
'[2] From nothing',
'[3] Collectable',
'[4] Iterable',
'[5] Iteration',
'4'
);

INSERT INTO testtaker VALUES('Which of the following Collections allows for random access?',
'[1] Sets',
'[2] PriorityQueue',
'[3] ArrayList',
'[4] Stack',
'[5] None of these',
'3'
);

INSERT INTO testtaker VALUES('How do I prevent data from being Serialized?',
'[1] Using the Synchronized keyword',
'[2] Using the Transient keyword',
'[3] Using the Primary keyword',
'[4] Using the Static keyword',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('What is a Scanner?',
'[1] An object used to take in user input',
'[2] An object used to parse data',
'[3] An object used to scan serialized byte code',
'[4] What WalMart uses',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('Which of these access modifiers is the most restrictive?',
'[1] Protected',
'[2] Default',
'[3] Final',
'[4] Private',
'[5] None of these',
'4'
);

INSERT INTO testtaker VALUES('Where is the java archiver found? ',
'[1] JQL',
'[2] JRE',
'[3] JDK',
'[4] JVM',
'[5] SQL',
'3'
);

INSERT INTO testtaker VALUES('How is Encapsulation achieved?',
'[1] Access Modifiers',
'[2] Non-access Modifiers',
'[3] Inheritance',
'[4] The Final Keyword',
'[5] None of these',
'1'
);

INSERT INTO testtaker VALUES('How many bits are taken up by the byte integer primitive?',
'[1] 32-bits',
'[2] 16-bits',
'[3] 64-bits',
'[4] 128-bits',
'[5] 8-bits',
'5'
);

INSERT INTO testtaker VALUES('What is autoboxing?',
'[1] The explicit transformation of a datatype from its wrapper class to its primitive',
'[2] It is an Object Oriented Programming Language.',
'[3] The explicit transformation of a datatype from primitive to its wrapper class',
'[4] The implicit transformation of a dattype from its wrapper class to its primitive',
'[5] The implicit transformation of a datatype from primitive to its wrapper class',
'5'
);

INSERT INTO testtaker VALUES('Which of these is not a type of integer primitive?',
'[1] double',
'[2] short',
'[3] byte',
'[4] int',
'[5] long',
'1'
);

INSERT INTO testtaker VALUES('Which of these is not a valid declaration of a primitive?',
'[1] int i = 32;',
'[2] float f = 32.0;',
'[3] short s = 12;',
'[4] long l;',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('Which of these is not throwable?',
'[1] Error',
'[2] IOException',
'[3] SQLException',
'[4] ArithmeticException',
'[5] None of these',
'5'
);

INSERT INTO testtaker VALUES('Which of the following is not a core command of Data Manipulation Language?',
'[1] SELECT',
'[2] ALTER',
'[3] INSERT',
'[4] DELETE',
'[5] None of these',
'2'
);

INSERT INTO testtaker VALUES('What is multiplicity?',
'[1] The narrowing of the range of cardinality',
'[2] When a function has a double 0',
'[3] Another word for Cardinality',
'[4] A command in SQL used to multiply tables',
'[5] None of these',
'1'
);

INSERT INTO testtaker VALUES('What are way[s] we can handle exceptions?',
'[1] Ducking',
'[2] Using try-catch blocks',
'[3] You cannot',
'[4] Both [1] and [2]',
'[5] None of these',
'4'
);

INSERT INTO testtaker VALUES('Which of the following is not one of the important interfaces/classes for JDBC?',
'[1] SQLException',
'[2] ResultSet',
'[3] DriveManager',
'[4] Statement',
'[5] None of these',
'3'
);

INSERT INTO testtaker VALUES('What is a Constructor?',
'[1] Bob the Builder',
'[2] A subroutine used to instantiate an instance of a Class',
'[3] A method used to make classes',
'[4] A class used to make objects',
'[5] None of the above',
'2'
);

INSERT INTO testtaker VALUES('What is the minimum number of catch blocks required in a try-catch block?',
'[1] 0',
'[2] 1',
'[3] 2',
'[4] 3',
'[5] 4',
'1'
);

INSERT INTO testtaker VALUES('What is an Outer Join?',
'[1] Properly join all data together substituting nulls where all data is absent',
'[2] Only shows records within the compared value existing in both tables',
'[3] The Cartesian cross product of records from both tables, so you get a list of permutations from the tables ',
'[4] All the data from the right table (2nd table) paired with left and substituting null where necessary',
'[5] None of the above',
'1'
);

INSERT INTO testtaker VALUES('What is a Full Join?',
'[1] Properly join all data together substituting nulls where all data is absent',
'[2] Only shows records within the compared value existing in both tables',
'[3] The Cartesian cross product of records from both tables, so you get a list of permutations from the tables ',
'[4] All the data from the right table (2nd table) paired with left and substituting null where necessary',
'[5] None of the above',
'1'
);

INSERT INTO testtaker VALUES('Which of the following is not an unchecked exception?',
'[1] ArithmeticException',
'[2] IOException',
'[3] NullPointerException',
'[4] StackOverflowException',
'[5] None of the above',
'2'
);






SELECT i_id FROM instructor WHERE i_name = 'Ncamedrano1';


commit;







